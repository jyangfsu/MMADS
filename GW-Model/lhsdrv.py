# -*- coding: utf-8 -*-
"""
Created on Tue May 19 16:19:35 2020

@author: Jing
"""
import os 
import numpy as np
import pandas as pd 
   
def lhs(problem, nobs, seed):
    """
    Generate a latin-hypercube design using the lhsdrv.exe. The lhsdrv.exe is 
    Sandia's Latin Hypercube Sampling package. The program is included in dakota/bin/.
    See https://dakota.sandia.gov/content/packages/lhs.
    
    Returns a NumPy matrix containing the model inputs generated by Latin
    hypercube sampling.  The resulting matrix contains nobs rows and D columns,
    where D is the number of parameters.
    
    Parameters
    ----------
    problem : dict
        The descritpion of the problem. 
    nobs : int
        The number of factors to generate samples for     
  
    Optional
    --------
    seed : int
        The random seed for reproducing the results
    
    Returns
    -------
    H : 2d-array
        An nobs-by-D design matrix
     
    """
    
    lhsdrv = 'lhsdrv.exe'
    
    try:
        os.remove('LHS_1.out')
        os.remove('LHS_2.out')
        os.remove('Rand.dat')
    except:
        pass
    
    with open('Rand.dat', 'w') as fobj:
        fobj.write('lhstitl TEST #flow\n')
        fobj.write('lhsout LHS_1.out\n')
        fobj.write('lhsmsg LHS_2.out\n')
        fobj.write('lhsseed %d\n' %seed)
        fobj.write('lhsobs %d\n' %nobs)
        fobj.write('lhsrpts data corr hist\n')
        fobj.write('dataset:\n')
        for i in range(problem['nvars']):
            fobj.write('%s %s %.4f %.4f\n' %(problem['names'][i], problem['dists'][i], problem['bounds'][i][0], problem['bounds'][i][1]))
            

    os.system(lhsdrv + ' Rand.dat')
    values = pd.read_table('LHS_1.out', header=None, skiprows=21 + 2 * problem['nvars'], sep='\s+').values.reshape([nobs, -1])
    df = pd.DataFrame(values).dropna(how='all', axis=1)
    H = df.values[:, 2:problem['nvars'] + 2]
    # H = pd.read_table('LHS2_DBG$OUTPUT', header=None, sep='\s+').values.reshape([nobs, -1])[:, 2:problem['nvars'] + 2]
    
    try:
        os.remove('LHS_1.out')
        os.remove('LHS_2.out')
        os.remove('LHS_3.out')
        os.remove('LHS_7.out')
        os.remove('LHS_8.out')
        os.remove('LHS_9.out')
        os.remove('Rand.dat')
        os.remove('fort.4')
        
    except:
        pass
    
    return H


if __name__ == '__main__': 
    lhs_inp = {'nvars': 8,
               'names':['PerLN' ,'PorNO', 'Mult', 'Length', 'Tmp1', 'Tmp2', 'Tmp3', 'Tmp4'],
               'bounds': [[0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1]],
               'dists': ['UNIFORM', 'UNIFORM', 'UNIFORM', 'UNIFORM', 'UNIFORM', 'UNIFORM', 'UNIFORM', 'UNIFORM']
               }
    
    H = lhs(lhs_inp, nobs=500, seed=933090934)